Not official API for YimmMenu, i'm updating this when i found new API stuff's.
By _picho_

-----------------------------------------------------------------------------
lua_patch:apply()
lua_patch:restore()

-----------------------------------------------------------------------------

entities.get_all_vehicles_as_handles() / Returns all vehicles as script handles
entities.get_all_peds_as_handles() / Returns all peds as script handles
entities.get_all_objects_as_handles() / Returns all objects as script handles
-----------------------------------------------------------------------------
input_string:get_value() ( local string = input_string:get_value() )
input_string:set_value(val)

input_float:get_value() ( local string = input_string:get_value() )
input_float:set_value(val)

-----------------------------------------------------------------------------

joaat("str") / A way to convert the name into Gta V hash.
script_util / Is the way to call your own script.

command.call("spawn", {joaat("adder")}) / A way to call existing commands in YimmMenu. / All command list listed down below.
command.call_player(PlayerIndex, "spawn", {joaat("adder")})
register_handler(menu_event, func) / Register a function that will be called each time the corresponding menu_event is triggered.

Example:
command.call("spawn", {joaat("adder")})
command.call_player(somePlayerIndex, "spawn", {joaat("adder")})


base_text_element:set_text(new_text) / The new text for that gui text element.
base_text_element:get_text() / Returns the current text for that gui text element. ( string = base_text_element:get_text() ) 
text:set_font(font) / The new font name for that imgui text element.

log.info("index") / Used to log anything you want to show up at the console.
log.warning(data) / Logs a warning message.
log.debug(data) / Logs a debug message.

-----------------------------------------------------------------------------
script_util:yield() / Yield execution.
script_util:sleep(ms) / Sleep for the given amount of time, time is in milliseconds.

-----------------------------------------------------------------------------
gui.get_tab(tab_name) / Can be used to create tabs between Yimm Menu. ( tab = gui.get_tab(tab_name) )
gui.show_message(title, message) / Shows a message to the user with the given title and message. 
gui.show_warning(title, message) / Shows a warning to the user with the given title and message.
gui.show_error(title, message) / Shows an error to the user with the given title and message.
gui.is_open() / Returns true if the GUI is open. ( bool = gui.is_open() )
gui.add_imgui(imgui_rendering) / Registers a function that will be called every rendering frame, you can call ImGui functions in it, please check the ImGui.md documentation file for more info.

All Tabs that you can call for YimmMenu listed down below.

Example:
missionsTab = gui.get_tab("GUI_TAB_MISSIONS")
missionsTab:add_button("Click me", function ()
    log.info("You clicked!")
end)

-----------------------------------------------------------------------------
tab:add_tab() / Add a sub tab to this tab.
tab:add_button(function(), function(), end) / Can be used to add buttons in Yimm Menu once having a tab created.
tab:add_checkbox(string, function(), end) / Can be used to add checkbox to the Yimm, also known has toggle.
/ Check Boxes, you can use different strings to execute them remotely, is_enabled() & set_enabled(enabled) \

tab:add_text(name) / Add text to the gui tab.
tab:clear() / Clear the tab of all its custom lua content that you own.

tab:add_sameline() / Add a ImGui::SameLine.
tab:add_separator() / Add a ImGui::Separator.
tab:add_input_int(name) / Add a ImGui::InputInt.
tab:add_input_float(name) / Add a ImGui::InputFloat.
tab:add_input_string(name) / Add a ImGui::InputText.

-----------------------------------------------------------------------------
vec3() / Sets a new vector3 instance. ( myInstance = vec3:new(x, y, z) )
-----------------------------------------------------------------------------
network.trigger_script_event(bitset, _args) / Call trigger_script_event (TSE).
network.give_pickup_rewards(player, reward) / Give the given pickup reward to the given player.
network.set_player_coords(player_idx, x, y, z) / Teleport the given player to the given position.
network.set_all_player_coords(x, y, z) / Teleport all players to the given position.
network.flag_player_as_modder(player_idx) / Flags the given player as a modder in our local database.
network.force_script_host(script_name) / Try to force ourself to be host for the given GTA Script.
network.send_chat_message(msg, team_only) / Sends a message to the in game chat.

network.get_selected_player() / Returns the index of the currently selected player in the GUI. ( integer = network.get_selected_player() )
network.get_selected_database_player_rockstar_id() / Returns the rockstar id of the currently selected player in the GUI. ( integer = network.get_selected_database_player_rockstar_id() )
network.is_player_flagged_as_modder(player_idx) / Returns true if the given player is flagged as a modder. ( boolean = network.is_player_flagged_as_modder(player_idx) )

-----------------------------------------------------------------------------

memory.scan_pattern(pattern) / Scans the specified memory pattern within the "GTA5.exe" module and returns a pointer to the found address.
memory.handle_to_ptr(entity) / A rage::CDynamicEntity pointer to the script game entity handle
memory.ptr_to_handle(mem_addr) / The script game entity handle linked to the given rage::CDynamicEntity pointer.
memory.allocate(size) / A pointer to the newly allocated memory.
memory.free(ptr) / It emptys the given pointer.

-----------------------------------------------------------------------------
script("script index") / Can be used to call the Gta V script.
is_active() / Can be used to double check if the called script is executing.

script.register_looped(name, func) / Registers a function that will be looped as a gta script.
script.run_in_fiber(func) / Executes a function once inside the fiber pool, you can call natives inside it and yield or sleep.

tunables.set_int(tunable_name, val) / Can be used to write Gta V tunables.
tunables.set_float(tunable_name, val) / Can be used to write Gta V tunables.
tunables.set_bool(tunable_name, val) / Can be used to write Gta V tunables.

globals.set_uint(global, val) / Can be used to write the uint value of a Gta V global.
globals.set_float(global, val) / Can be used to write the floaat value of a Gta V global.
globals.set_string(global, str) / Can be used to write the string value of a Gta V global.

tunables.get_float(tunable_name) / Can be used to read Gta V tunables or globals. ( float = tunables.get_float(tunable_name) )
tunables.get_int(tunable_name) / Can be used to read Gta V tunables or globals. ( integer = tunables.get_int(tunable_name) )
tunables.get_bool(tunable_name) / Can be used to read Gta V tunables or globals. ( boolean = tunables.get_bool(tunable_name) )
 
globals.get_uint(global) / Can be used to read the uint value of a Gta V global. ( integer = globals.get_uint(global) ) 
globals.get_float(global) / Can be used to read the floaat value of a Gta V global. ( float = globals.get_float(global) )
globals.get_string(global) / Can be used to read the string value of a Gta V global. ( string = globals.get_string(global) )
globals.get_pointer(global) / Can be used to read the pointer value of a Gta V global. ( pointer = globals.get_pointer(global) )

stats.get_character_index() / Returns the current multiplayer character index (0 or 1).
stats.get_bool(stat_hash) / Returns the value of the given stat. (stats.get_bool(stat_name) / Same)
stats.get_float(stat_hash) / Returns the value of the given stat.
stats.get_int(stat_hash) / Returns the value of the given stat.

stats.set_bool(stat_hash, new_value)
stats.set_float(stat_hash, new_value)
stats.set_int(stat_hash, new_value)

stats.set_bool_masked(stat_hash, new_value, bit_index)
stats.set_masked_int(stat_hash, new_value, bit_start, bit_size)

stats.get_bool_masked(stat_hash, bit_index) / Returns the value of the given stat.
stats.get_masked_int(stat_hash, bit_start, bit_size) / Returns the value of the given stat.

-----------------------------------------------------------------------------
pointer:new(address) / Returns a memory instance, with the given address.
pointer:add(offset) / Adds an offset to the current memory address and returns a new pointer object.
pointer:sub(offset) / Subs an offset to the current memory address and returns a new pointer object.
pointer:rip(offset) / Rips the current memory address and returns a new pointer object.

local qword = pointer:get_qword() / The example for every single event below.
pointer:get_byte() / Retrieves the value stored at the memory address as the specified type.
pointer:get_word() / Retrieves the value stored at the memory address as the specified type.
pointer:get_dword() / Retrieves the value stored at the memory address as the specified type.
pointer:get_float() / Retrieves the value stored at the memory address as the specified type.
pointer:get_qword() / Retrieves the value stored at the memory address as the specified type. 
pointer:get_string() / Retrieves the value stored at the memory address as the specified type.

Retrieves the value stored at the memory address as the specified type.
pointer:set_byte(value)
pointer:set_word(value)
pointer:set_dword(value)
pointer:set_float(value)
pointer:set_qword(value)
pointer:set_string(value)

Creates a memory patch for modifying the value at the memory address with the specified value. The modified value is applied when you call the apply function on the lua_patch object. The original value is restored when you call the restore function on the lua_patch object.
pointer:patch_byte(value) 
pointer:patch_word(value)
pointer:patch_dword(value)
pointer:patch_qword(value)

pointer:is_null() / Returns true if the address is null.
pointer:is_valid() / Returns true if the address is null.

pointer:deref() / Dereferences the memory address and returns a new pointer object pointing to the value at that address.
pointer:get_address() / Retrieves the memory address stored in the pointer object.
-----------------------------------------------------------------------------
event.register_handler(menu_event.event)

Events:
PlayerLeave
PlayerJoin
PlayerMgrInit
PlayerMgrShutdown
ChatMessageReceived
ScriptedGameEventReceived

-----------------------------------------------------------------------------
Tabs Listed:
GUI_TAB_SELF
GUI_TAB_WEAPONS
GUI_TAB_TELEPORT
GUI_TAB_MOBILE
GUI_TAB_OUTFIT_EDITOR
GUI_TAB_OUTFIT_SLOTS
GUI_TAB_VEHICLE
GUI_TAB_HANDLING
GUI_TAB_HANDLING_SEARCH
GUI_TAB_HANDLING_SAVED_PROFILE
GUI_TAB_HANDLING_MY_PROFILES
GUI_TAB_HANDLING_CURRENT_PROFILE
GUI_TAB_LSC
GUI_TAB_SPAWN_VEHICLE
GUI_TAB_FUN_VEHICLE
GUI_TAB_WORLD
GUI_TAB_SPAWN_PED
GUI_TAB_SQUAD_SPAWNER
GUI_TAB_CREATOR
GUI_TAB_TRAIN
GUI_TAB_BLACKHOLE
GUI_TAB_MODEL_SWAPPER
GUI_TAB_NETWORK
GUI_TAB_MISSIONS
GUI_TAB_SPOOFING
GUI_TAB_PLAYER_DATABASE
GUI_TAB_SESSION_BROWSER
GUI_TAB_STAT_EDITOR
GUI_TAB_SETTINGS
GUI_TAB_LUA_SCRIPTS
GUI_TAB_CONTEXT_MENU_SETTINGS
GUI_TAB_ESP_SETTINGS
GUI_TAB_GTA_CACHE_SETTINGS
GUI_TAB_GUI_SETTINGS
GUI_TAB_HOTKEY_SETTINGS
GUI_TAB_REACTION_SETTINGS
GUI_TAB_PROTECTION_SETTINGS
GUI_TAB_TRANSLATION_SETTINGS
GUI_TAB_DEBUG
GUI_TAB_PLAYER
-----------------------------------------------------------------------------

Commands Listed:
bailkick
BAIL_KICK_DESC Arg Count: 1

bailkickall
BAIL_KICK_DESC Arg Count: 0

breakup
BREAKUP_KICK_DESC Arg Count: 1

breakupcheating
BREAKUP_KICK_SHOW_CHEATING_DESC Arg Count: 0

desync
COMPLAINT_KICK_DESC Arg Count: 1

desyncall
COMPLAINT_KICK_DESC Arg Count: 0

endkick
END_KICK_DESC Arg Count: 1

hostkick
Host kick that only works when host Arg Count: 1

nfkick
NULL_FUNCTION_KICK_DESC Arg Count: 1

nfkickall
NULL_FUNCTION_KICK_DESC Arg Count: 0

oomkick
OOM_KICK_CMD_DESC Arg Count: 1

shkick
SCRIPT_HOST_KICK_DESC Arg Count: 1

clearwanted
CLEAR_WANTED_LEVEL_DESC Arg Count: 1

clearwantedall
CLEAR_WANTED_LEVEL_DESC Arg Count: 0

enterint
ENTER_INTERIOR_DESC Arg Count: 1

giveammo
GIVE_AMMO_DESC Arg Count: 1

giveammoall
GIVE_AMMO_DESC Arg Count: 0

givearmor
GIVE_ARMOR_DESC Arg Count: 1

givearmorall
GIVE_ARMOR_DESC Arg Count: 0

givehealth
GIVE_HEALTH_DESC Arg Count: 1

givehealthall
GIVE_HEALTH_DESC Arg Count: 0

joinceo
JOIN_CEO_DESC Arg Count: 1

copymodel
STEAL_IDENTITY_DESC Arg Count: 1

copyoutfit
STEAL_OUTFIT_DESC Arg Count: 1

ceokick
CEO_KICK_DESC Arg Count: 1

ceokickall
CEO_KICK_DESC Arg Count: 0

explode
EXPLODE_PLAYER_DESC Arg Count: 1

explodeall
EXPLODE_PLAYER_DESC Arg Count: 0

mission
FORCE_INTO_MISSION_DESC Arg Count: 1

missionall
FORCE_INTO_MISSION_DESC Arg Count: 0

giveweaps
GIVE_WEAPONS_DESC Arg Count: 1

giveweapsall
GIVE_WEAPONS_ALL_DESC Arg Count: 0

intkick
KICK_FROM_INTERIOR_DESC Arg Count: 1

intkickall
KICK_FROM_INTERIOR_DESC Arg Count: 0

vehkick
VEHICLE_KICK_DESC Arg Count: 1

vehkickall
VEHICLE_KICK_DESC Arg Count: 0

kill
KILL_PLAYER_DESC Arg Count: 1

killall
KILL_PLAYER_DESC Arg Count: 0

ragdoll
RAGDOLL_PLAYER_DESC Arg Count: 1

ragdollall
RAGDOLL_PLAYER_DESC Arg Count: 0

remweaps
REMOVE_ALL_WEAPONS_DESC Arg Count: 1

remweapsall
REMOVE_ALL_WEAPONS_DESC Arg Count: 0

fakeban
FAKE_BAN_MESSAGE_DESC Arg Count: 1

fakebanall
FAKE_BAN_MESSAGE_DESC Arg Count: 0

sext
SEND_SEXT_DESC Arg Count: 1

sextall
SEND_SEXT_DESC Arg Count: 0

apartmenttp
TP_TO_APARTMENT_DESC Arg Count: 2

apartmenttpall
TP_TO_APARTMENT_DESC Arg Count: 1

interiortp
TP_TO_INTERIOR_DESC Arg Count: 2

interiortpall
TP_TO_INTERIOR_DESC Arg Count: 1

warehousetp
TP_TO_WAREHOUSE_DESC Arg Count: 2

warehousetpall
TP_TO_WAREHOUSE_DESC Arg Count: 1

wanted
SET_WANTED_LEVEL_DESC Arg Count: 2

error
SHOW_TRANSACTION_ERROR_DESC Arg Count: 1

errorall
SHOW_TRANSACTION_ERROR_DESC Arg Count: 0

tutorial
Plays that unskippable cutscene used in the tutorial Arg Count: 1

tutorialall
Plays that unskippable cutscene used in the tutorial Arg Count: 0

golf
Starts golf Arg Count: 1

golfall
Starts golf Arg Count: 0

flightschool
Teleports player to the airport and starts flight school Arg Count: 1

flightschoolall
Teleports player to the airport and starts flight school Arg Count: 0

darts
Starts darts in a Sandy Shores bar Arg Count: 1

dartsall
Starts darts in a Sandy Shores bar Arg Count: 0

badlands
Starts the arcade game Badlands Revenge II in fullscreen Arg Count: 1

badlandsall
Starts the arcade game Badlands Revenge II in fullscreen Arg Count: 0

spacemonkey
Starts the arcade game Space Monkey 3 in fullscreen Arg Count: 1

spacemonkeyall
Starts the arcade game Space Monkey 3 in fullscreen Arg Count: 0

wizard
Starts the arcade game The Wizard's Ruin in fullscreen Arg Count: 1

wizardall
Starts the arcade game The Wizard's Ruin in fullscreen Arg Count: 0

qub3d
Starts the arcade game Qub3D in fullscreen Arg Count: 1

qub3dall
Starts the arcade game Qub3D in fullscreen Arg Count: 0

camhedz
Starts the arcade game Camhedz in fullscreen Arg Count: 1

camhedzall
Starts the arcade game Camhedz in fullscreen Arg Count: 0

ceoraid
TRIGGER_CEO_RAID_DESC Arg Count: 1

ceoraidall
TRIGGER_CEO_RAID_DESC Arg Count: 0

beast
TURN_INTO_BEAST_DESC Arg Count: 1

beastall
TURN_INTO_BEAST_ALL_DESC Arg Count: 0

bring
BRING_DESC Arg Count: 1

bringall
BRING_ALL_DESC Arg Count: 0

bounty
BOUNTY_DESC Arg Count: 1

bountyall
BOUNTY_DESC Arg Count: 0

anonbounty
BOUNTY_ANON_DESC Arg Count: 0

playertp
TELEPORT_DESC Arg Count: 1

playervehtp
TELEPORT_INTO_VEHICLE_DESC Arg Count: 1

boostveh
Boosts their car very fast. Arg Count: 1

boostvehall
Boosts their car very fast. Arg Count: 0

burstwheels
Removes their tyres. Arg Count: 1

burstwheelsall
Removes their tyres. Arg Count: 0

closedoors
Closes all vehicle doors Arg Count: 1

closedoorsall
Closes all vehicle doors Arg Count: 0

downgradeveh
Removes all upgrades Arg Count: 1

downgradevehall
Removes all upgrades Arg Count: 0

flip180
Rotates their car around Arg Count: 1

flip180all
Rotates their car around Arg Count: 0

flyingveh
Catapults their car to the sky. Arg Count: 1

flyingvehall
Catapults their car to the sky. Arg Count: 0

killengine
Breaks their engine Arg Count: 1

killengineall
Breaks their engine Arg Count: 0

lockveh
Locks vehicle doors Arg Count: 1

lockvehall
Locks vehicle doors Arg Count: 0

opendoors
Opens all vehicle doors Arg Count: 1

opendoorsall
Opens all vehicle doors Arg Count: 0

rcplayer
Take control of the player's vehicle. Spectate the player beforehand for best results Arg Count: 1

smashwindows
Smashes all their windows Arg Count: 1

smashwindowsall
Smashes all their windows Arg Count: 0

stopveh
Stops players vehicle Arg Count: 1

stopvehall
Stops players vehicle Arg Count: 0

unlockveh
Unlocks Vehicle Doors Arg Count: 1

unlockvehall
Unlocks Vehicle Doors Arg Count: 0

upgradeveh
Upgrades players vehicle Arg Count: 1

upgradevehall
Upgrades players vehicle Arg Count: 0

blacktint
Makes their windows black. Arg Count: 1

blacktintall
Makes their windows black. Arg Count: 0

fillammo
Fills all of your ammo. Arg Count: 0

beastjump
Allows you to jump as if you were the beast like in the Hunt the Beast event Arg Count: 0

clean
Cleans the player of wetness and decals Arg Count: 0

clearwantedlvl
Clears your wanted level Arg Count: 0

fillsnacks
Refills snacks and armor Arg Count: 0

heal
HEAL_DESC Arg Count: 0

repairpv
Repairs your currently active personal vehicle Arg Count: 0

boatpickup
Request a boat pickup Arg Count: 0

ballisticarmor
Requests ballistic equipment which includes ballistic armor and an minigun Arg Count: 0

skipcutscene
Skips the currently playing cutscene Arg Count: 0

suicide
Kills you Arg Count: 0

superjump
Jump really high Arg Count: 0

spawn
Spawn a vehicle with the specified model Arg Count: 1

spawnmaxed
Controls whether the vehicle spawned will have its mods maxed out Arg Count: 0

spawnin
Controls whether the player should be set inside the vehicle after it spawns Arg Count: 0

fastquit
We all have bad times sometimes. Close your GTA instant. Arg Count: 0

bringpv
Teleports your PV near you Arg Count: 0

lastvehtp
Teleports you into your last driven vehicle Arg Count: 0

objectivetp
Teleports you to your mission objective Arg Count: 0

pvtp
Teleports you into your PV Arg Count: 0

waypointtp
Teleports you to your waypoint Arg Count: 0

hudcolor
Override HUD colors Arg Count: 0

cleanloop
KEEP_PLAYER_CLEAN_DESC Arg Count: 0

fastrespawn
INSTANT_RESPAWN_DESC Arg Count: 0

freecam
FREECAM_DESC Arg Count: 0

godmode
GODMODE_DESC Arg Count: 0

healthregen
HEALTH_REGEN_DESC Arg Count: 0

invis
INVISIBILITY_DESC Arg Count: 0

localvis
LOCAL_VISIBILITY_DESC Arg Count: 0

mobileradio
MOBILE_RADIO_DESC Arg Count: 0

nocollision
NO_COLLISION_DESC Arg Count: 0

noragdoll
NO_RAGDOLL_DESC Arg Count: 0

walkunder
WALK_UNDERWATER_DESC Arg Count: 0

noclip
NO_CLIP_DESC Arg Count: 0

otr
OFF_RADAR_DESC Arg Count: 0

ptfx
PTFX_CMD_DESC Arg Count: 0

fastrun
SUPER_RUN_DESC Arg Count: 0

superman
SUPERMAN_DESC Arg Count: 0

infoxy
UNLIMITED_OXYGEN_DESC Arg Count: 0

autotptowp
Automatically teleports you to a waypoint as soon as you set one Arg Count: 0

vcaudio
Plays the audio.wav file in the project folder through voice chat. The wave file must be encoded with a mono 16 bit 16kHz PCM format. You have to reset voice chat settings whenever you load the menu for the sound to play Arg Count: 0

nophone
Blocks phone and stops all phone calls Arg Count: 0

noidlekick
Prevents you from being kicked while idling. Arg Count: 0

blockhoming
Prevents homing missiles from locking on to your vehicle Arg Count: 0

mutesiren
Disables the siren sound of Emergency vehicles Arg Count: 0

driveonwater
Allows you to drive on water Arg Count: 0

vehiclefly
Fly with any land vehicle Arg Count: 0

hornboost
Boosts your vehicle forward when you sound the horn Arg Count: 0

instantbrake
Makes your vehicle stop instantly when you press the brake Arg Count: 0

invisveh
Makes your car invisible Arg Count: 0

localinvisveh
Makes your car visible to yourself, other players will still not be able to see it Arg Count: 0

keepengine
Keeps the engine running when you exit the vehicle Arg Count: 0

keeponground
Makes it so your vehicle is always on the ground on all four wheels Arg Count: 0

keepfixed
Keeps your vehicle free of wear and tear Arg Count: 0

vehnocollision
Same as Ped No Collision, except this is global and also affects Ped Arg Count: 0

driveunder
Allows you to drive underwater Arg Count: 0

rainbowpri
Applies active rainbow effect to the current vehicle's primary color Arg Count: 0

rainbowsec
Applies active rainbow effect to the current vehicle's secondary color Arg Count: 0

rainbowneons
Applies active rainbow effect to the current vehicle's neon color Arg Count: 0

rainbowsmoke
Applies active rainbow effect to the current vehicle's tire smoke color Arg Count: 0

rainbowspeed
Speed of the rainbow paint effect Arg Count: 1

seatbelt
Prevent you from falling off bikes or flying through the windshield Arg Count: 0

speedometer
Enable/disable the speedo meter for vehicles. Arg Count: 0

speedometergears
Adds the current gear the vehicle is in to the speedo meter. Arg Count: 0

speedometerleftside
Aligns the speedo meter text to the left instead of to the right. Arg Count: 0

turnsignals
Makes your car invisible Arg Count: 0

vehallweapons
Allows you to use all weapons in vehicle Arg Count: 0

vehgodmode
Prevents your vehicle from taking any form of damage Arg Count: 0

vehjump
Makes the vehicle jump when you press the handbrake Arg Count: 0

aimbot
Lock on and kill Arg Count: 0

smoothing
Controls the snappiness of your lock on Arg Count: 0

aimatplayer
If you suck at PVP, this is for you Arg Count: 0

aimatnpc
Generally kills normal NPCs Arg Count: 0

aimatpolice
Locks onto cops to kill Arg Count: 0

aimatenemy
Eliminate your enemies, and win your missions Arg Count: 0

alwaysfullammo
Refills your ammo every tick Arg Count: 0

incrdamage
Sets your damage to whatever you want Arg Count: 0

infammo
Never run out of ammo again Arg Count: 0

infclip
Shoot forever without needing to reload Arg Count: 0

infrange
Kill anything at any distance Arg Count: 0

norecoil
Removes weapon recoil when shooting Arg Count: 0

nospread
Removes weapon spread when shooting Arg Count: 0

rapidfire
Makes your weapon fire insanely fast Arg Count: 0

triggerbot
Shoots at a ped with fast ease Arg Count: 0

blackhole
Spawns a blackhole that picks up all the peds and vehicles in your area Arg Count: 0

blackholeincpeds
Includes all nearby peds in the blackhole's path of destruction Arg Count: 0

blackholeincvehs
Includes all nearby vehicles in the blackhole's path of destruction Arg Count: 0

autodisarm
Disarm nearby pedestrians Arg Count: 0

riotmode
Make nearby peds attack each other Arg Count: 0

highalert
Not the CoD perk Arg Count: 0

pedsignore
Nearby peds will ignore you and become oblivious to your actions Arg Count: 0

pedrush
Makes the nearby peds move with a purpose Arg Count: 0

pedrain
Will pour down and rain nearby peds Arg Count: 0

vehiclerain
Drops surrounding vehicles, vehicles can hit and kill you! Arg Count: 0

timeoverride
Overrides current time. This is local and cannot be seen by other players Arg Count: 0

weatheroverride
Overrides current weather. This is local and cannot be seen by other players Arg Count: 0

orbitaldrone
Enables/Disables the orbital drone Arg Count: 0

player_db_auto_update_states
Toggling this feature will automatically update the player online states every 5minutes. Arg Count: 0

vehiclecontrol
Enables/Disables the vehicle controller. Arg Count: 0

cmdexecutor
Toggles the command executor window Arg Count: 0

----------------------------------------------------------------------------------------------------------------------------------------------------------

ImGui API:

Windows:
  -- ImGui.Begin(...)
  -- Parameters: text (name), bool (open) [O], ImGuiWindowFlags (flags) [O]
  -- Returns A: bool (shouldDraw)
  -- Returns B & C: bool (open), bool (shouldDraw)
  -- Overloads
  shouldDraw = ImGui.Begin("Name")
  shouldDraw = ImGui.Begin("Name", ImGuiWindowFlags.NoMove)
  open, shouldDraw = ImGui.Begin("Name", open)
  open, shouldDraw = ImGui.Begin("Name", open, ImGuiWindowFlags.NoMove)

  -- ImGui.End()
  ImGui.End()

Child Windos:
  -- ImGui.BeginChild(...)
  -- Parameters: text (name), float (size_x) [O], float (size_y) [O], bool (border) [O], ImGuiWindowFlags (flags) [O]
  -- Returns: bool (shouldDraw)
  -- Overloads
  shouldDraw = ImGui.BeginChild("Name")
  shouldDraw = ImGui.BeginChild("Name", 100)
  shouldDraw = ImGui.BeginChild("Name", 100, 200)
  shouldDraw = ImGui.BeginChild("Name", 100, 200, true)
  shouldDraw = ImGui.BeginChild("Name", 100, 200, true, ImGuiWindowFlags.NoMove)

  -- ImGui.EndChild()
  ImGui.EndChild()

Windows Utilities:
  -- ImGui.IsWindowAppearing()
  -- Returns: bool (appearing)
  appearing = ImGui.IsWindowAppearing()

  -- ImGui.IsWindowCollapsed()
  -- Returns: bool (collapsed)
  collapsed = ImGui.IsWindowCollapsed()

  -- ImGui.IsWindowFocused(...)
  -- Parameters: ImGuiFocusedFlags (flags) [O]
  -- Returns: bool (focused)
  -- Overloads
  focused = ImGui.IsWindowFocused()
  focused = ImGui.IsWindowFocused(ImGuiFocusedFlags.ChildWindows)

  -- ImGui.IsWindowHovered(...)
  -- Parameters: ImGuiHoveredFlags (flags) [O]
  -- Returns: bool (hovered)
  -- Overloads
  hovered = ImGui.IswindowHovered()
  hovered = ImGui.IsWindowHovered(ImGuiHoveredFlags.ChildWindows)

  -- ImGui.GetWindowDpiScale()
  -- Returns: float (dpiScale)
  dpiScale = ImGui.GetWindowDpiScale()

  -- ImGui.GetWindowPos()
  -- Returns: float (pos_x), float (pos_y)
  pos_x, pos_y = ImGui.GetWindowPos()

  -- ImGui.GetWindowSize()
  -- Returns: float (size_x), float (size_y)
  size_x, size_y = ImGui.GetWindowSize()

  -- ImGui.GetWindowWidth()
  -- Returns: float (width)
  width = ImGui.GetWindowWidth()

  -- ImGui.GetWindowHeight()
  -- Returns: float (height)
  height = ImGui.GetWindowHeight()

  -- ImGui.SetNextWindowPos(...)
  -- Parameters: float (pos_x), float (pos_y), ImGuiCond (cond) [O], float (pivot_x) [O], float (pivot_y) [O]
  -- Overloads
  ImGui.SetNextWindowPos(100, 100)
  ImGui.SetNextWindowPos(100, 100, ImGuiCond.Always)
  ImGui.SetNextWindowPos(100, 100, ImGuiCond.Always, 0, 0.5)

  -- ImGui.SetNextWindowSize(...)
  -- Parameters: float (size_x), float (size_y), ImGuiCond (cond) [O]
  -- Overloads
  ImGui.SetNextWindowSize(500, 500)
  ImGui.SetNextWindowSize(500, 500, ImGuiCond.Appearing)

  -- ImGui.SetNextWindowSizeConstraints(...)
  -- Parameters: float (min_x), float (min_y), float (max_x), float (max_y)
  ImGui.SetNextWindowSizeConstraints(100, 100, 500, 600)

  -- ImGui.SetNextWindowContentSize(...)
  -- Parameters: float (size_x), float (size_y)
  ImGui.SetNextWindowContentSize(200, 100)

  -- ImGui.SetNextWindowCollapsed(...)
  -- Parameters: bool (collapsed), ImGuiCond (cond) [O]
  -- Overloads
  ImGui.SetNextWindowCollapsed(true)
  ImGui.SetNextWindowCollapsed(true, ImGuiCond.Appearing)

  -- ImGui.SetNextWindowFocus()
  ImGui.SetNextWindowFocus()

  -- ImGui.SetNextWindowBgAlpha(...)
  -- Parameters: float (alpha)
  ImGui.SetNextWindowBgAlpha(0.5)

  -- ImGui.SetWindowPos(...)
  -- Parameters: float (pos_x), float (pos_y), ImguiCond (cond) [O]
  -- Overloads
  ImGui.SetWindowPos(100, 100)
  ImGui.SetWindowPos(100, 100, ImGuiCond.Appearing)

  -- ImGui.SetWindowSize(...)
  -- Parameters: float (size_x), float (size_y), ImguiCond (cond) [O]
  -- Overloads
  ImGui.SetWindowSize(100, 300)
  ImGui.SetWindowSize(100, 300, ImGuiCond.Appearing)

  -- ImGui.SetWindowCollapsed(...)
  -- Parameters: bool (collapsed), ImguiCond (cond) [O]
  -- Overloads
  ImGui.SetWindowCollapsed(false)
  ImGui.SetWindowCollapsed(true, ImGuiCond.Appearing)

  -- ImGui.SetWindowFocus()
  ImGui.SetWindowFocus()

  -- ImGui.SetWindowFontScale(...)
  -- Parameters: float (scale)
  ImGui.SetWindowFontScale(1.2)

  -- ImGui.SetWindowPos(...)
  -- Parameters: text (name), float (pos_x), float (pos_y), ImGuiCond (cond) [O]
  -- Overloads
  ImGui.SetWindowPos("WindowName", 100, 100)
  ImGui.SetWindowPos("WindowName", 100, 100, ImGuiCond.Always)

  -- ImGui.SetWindowSize(...)
  -- Parameters: text (name), float (size_x), float (size_y), ImGuiCond (cond) [O]
  -- Overloads
  ImGui.SetWindowSize("WindowName", 300, 400)
  ImGui.SetWindowSize("WindowName", 300, 400, ImGuiCond.Always)

  -- ImGui.SetWindowCollapsed(...)
  -- Parameters: text (name), bool (collapsed), ImGuiCond (cond) [O]
  -- Overloads
  ImGui.SetWindowCollapsed("WindowName", true)
  ImGui.SetWindowCollapsed("WindowName", false, ImGuiCond.Always)

  -- ImGui.SetWindowFocus(...)
  -- Parameters: text (name)
  ImGui.SetWindowFocus("WindowName")

Region Content:
  -- ImGui.GetContentRegionMax()
  -- Returns: float (x), float (y)
  x, y = ImGui.GetContentRegionMax()

  -- ImGui.GetContentRegionAvail()
  -- Returns: float (x), float (y)
  x, y = ImGui.GetContentRegionAvail()

  -- ImGui.GetWindowContentRegionMin()
  -- Returns: float (x), float (y)
  x, y = ImGui.GetWindowContentRegionMin()

  -- ImGui.GetWindowContentRegionMax()
  -- Returns: float (x), float (y)
  x, y = ImGui.GetWindowContentRegionMax()

  -- ImGui.GetWindowContentRegionWidth()
  -- Returns: float (width)
  width = ImGui.GetWindowContentRegionWidth()

Window Scrolling:
  -- ImGui.GetScrollX()
  -- Returns: float (x)
  x = ImGui.GetScrollX()

  -- ImGui.GetScrollY()
  -- Returns: float (y)
  y = ImGui.GetScrollY()

  -- ImGui.GetScrollMaxX()
  -- Returns: float (x)
  x = ImGui.GetScrollMaxX()

  -- ImGui.GetScrollMaxY()
  -- Returns: float (y)
  y = ImGui.GetScrollMaxY()

  -- ImGui.SetScrollX(...)
  -- Parameters: float (scroll_x)
  ImGui.SetScrollX(0.7)

  -- ImGui.SetScrollY(...)
  -- Parameters: float (scroll_y)
  ImGui.SetScrollY(0.7)

  -- ImGui.SetScrollHereX(...)
  -- Parameters: float (center_x_ratio) [O]
  -- Overloads
  ImGui.SetScrollHereX()
  ImGui.SetScrollHereX(0.5)

  -- ImGui.SetScrollHereY(...)
  -- Parameters: float (center_y_ratio) [O]
  -- Overloads
  ImGui.SetScrollHereY()
  ImGui.SetScrollHereY(0.5)

  -- ImGui.SetScrollFromPosX(...)
  -- Parameters: float (local_x), float (center_x_ratio) [O]
  -- Overloads
  ImGui.SetScrollFromPosX(10)
  ImGui.SetScrollFromPosX(10, 0.5)

  -- ImGui.SetScrollFromPosY(...)
  -- Parameters: float (local_y), float (center_y_ratio) [O]
  -- Overloads
  ImGui.SetScrollFromPosY(10)
  ImGui.SetScrollFromPosY(10, 0.5)

Stack Parameter (Shared):
  -- ImGui.PushStyleColor(...)
  -- Parameters A: ImGuiCol (idx), int (color_u32)
  -- Parameters B: ImGuiCol (idx), float (color_r), float (color_g), float (color_b), float (color_a)
  -- Overloads
  ImGui.PushStyleColor(ImGuiCol.Tab, 0xF42069FF)
  ImGui.PushStyleColor(ImGuiCol.Border, 1, 0, 0, 1)

  -- ImGui.PopStyleColor(...)
  -- Parameters: int (count) [O]
  -- Overloads
  ImGui.PopStyleColor()
  ImGui.PopStyleColor(5)

  -- ImGui.PushStyleVar(...)
  -- Parameters A: ImGuiStyleVar (idx), float (value)
  -- Parameters B: ImGuiStyleVar (idx), float (value_x), float (value_y)
  -- Overloads
  ImGui.PushStyleVar(ImGuiStyleVar.Alpha, 0.5)
  ImGui.PushStyleVar(ImGuiStyleVar.WindowPadding, 0.2, 0.1)

  -- ImGui.PopStyleVar(...)
  -- Parameters: int (count) [O]
  ImGui.PopStyleVar()
  ImGui.PopStyleVar(2)

  -- ImGui.GetStyleColorVec4(...)
  -- Parameters: ImGuiCol (idx)
  -- Returns: float (color_r), float (color_g), float (color_b), float (color_a)
  color_r, color_g, color_b, color_a = ImGui.GetStyleColorVec4(ImGuiCol.Text)

  -- ImGui.GetFontSize()
  -- Returns: float (fontSize)
  fontSize = ImGui.GetFontSize()

  -- ImGui.GetFontTexUvWhitePixel()
  -- Returns: float (x), float (y)
  x, y = ImGui.GetFontTexUvWhitePixel()

  -- ImGui.GetColorU32(...)
  -- Parameters A: ImGuiCol (idx), float (alphaMultiplier, usually stays at 1)
  -- Parameters B: float (color_r), float (color_g), float (color_b), float (color_a)
  -- Returns: int (color_u32)
  -- Overloads
  color_u32 = ImGui.GetColorU32(ImGuiCol.Text, 1)
  color_u32 = ImGui.GetColorU32(0, 1, 0, 1)

Parameter Stack (Current Window):
  -- ImGui.PushItemWidth(...)
  -- Parameters: float (width)
  ImGui.PushItemWidth(100)

  -- ImGui.PopItemWidth()
  ImGui.PopItemWidth()

  -- ImGui.SetNextItemWidth(...)
  -- Parameters: float (width)
  ImGui.SetNextItemWidth(100)

  -- ImGui.CalcItemWidth()
  -- Returns: float (width)
  width = ImGui.CalcItemWidth()

  -- ImGui.PushTextWrapPos(...)
  -- Parameters: float (wrap_local_pos_x) [O]
  -- Overloads
  ImGui.PushTextWrapPos()
  ImGui.PushTextWrapPos(50)

  -- ImGui.PopTextWrapPos()
  ImGui.PopTextWrapPos()

  -- ImGui.PushAllowKeyboardFocus(...)
  -- Parameters: bool (allow_keyboard_focus)
  ImGui.PushAllowKeyboardFocus(true)

  -- ImGui.PopAllowKeyboardFocus()
  ImGui.PopAllowKeyboardFocus()

  -- ImGui.PushButtonRepeat(...)
  -- Parameters: bool (repeat)
  ImGui.PushButtonRepeat(true)

  -- ImGui.PopButtonRepeat()
  ImGui.PopButtonRepeat()

Cursor:
  -- ImGui.Separator()
  ImGui.Separator

  -- ImGui.SameLine(...)
  -- Parameters: float (offset_from_start_x) [O], float (spacing) [O]
  -- Overloads
  ImGui.SameLine()
  ImGui.SameLine(100)
  ImGui.SameLine(100, 5)

  -- ImGui.NewLine()
  ImGui.NewLine()

  -- ImGui.Spacing()
  ImGui.Spacing()

  -- ImGui.Dummy(...)
  -- Parameters: float (size_x), float (size_y)
  ImGui.Dummy(100, 200)

  -- ImGui.Indent(...)
  -- Parameters: float (indent_w) [O]
  ImGui.Indent()
  ImGui.Indent(10)

  -- ImGui.Unindent(...)
  -- Parameters: float (indent_w) [O]
  ImGui.Unindent()
  ImGui.Unindent(-10)

  -- ImGui.BeginGroup()
  ImGui.BeginGroup()

  -- ImGui.EndGroup()
  ImGui.EndGroup()

  -- ImGui.GetCursorPos()
  -- Returns: float (x), float(y)
  x, y = ImGui.GetCursorPos()

  -- ImGui.GetCursorPosX()
  -- Returns: float (x)
  x = ImGui.GetCursorPosX()

  -- ImGui.GetCursorPosY()
  -- Returns: float (y)
  y = ImGui.GetCursorPosY()

  -- ImGui.SetCursorPos(...)
  -- Parameters: float (x), float (y)
  ImGui.SetCursorPos(10, 10)

  -- ImGui.SetCursorPosX(...)
  -- Parameters: float (x)
  ImGui.SetCursorPosX(10)

  -- ImGui.SetCursorPosY(...)
  -- Parameters: float (y)
  ImGui.SetCursorPosY(10)

  -- ImGui.GetCursorStartPos()
  -- Returns: float (x), float(y)
  x, y = ImGui.GetCursorStartPos()

  -- ImGui.GetCursorScreenPos()
  -- Returns: float (x), float(y)
  x, y = ImGui.GetCursorScreenPos()

  -- ImGui.SetCursorScreenPos(...)
  -- Parameters: float (x), float (y)
  ImGui.SetCursorScreenPos(10, 10)

  -- ImGui.AlignTextToFramePadding()
  ImGui.AlignTextToFramePadding()

  -- ImGui.GetTextLineHeight()
  -- Returns: float (height)
  height = ImGui.GetTextLineHeight()

  -- ImGui.GetTextLineHeightWithSpacing()
  -- Returns: float (height)
  height = ImGui.GetTextLineHeightWithSpacing()

  -- ImGui.GetFrameHeight()
  -- Returns: float (height)
  height = ImGui.GetFrameHeight()

  -- ImGui.GetFrameHeightWithSpacing()
  -- Returns: float (height)
  height = ImGui.GetFrameHeightWithSpacing()

ID Stack:
  -- ImGui.PushID(...)
  -- Parameters A: text (str_id)
  -- Parameters B: int (int_id)
  -- Overloads
  ImGui.PushID("MyID")
  ImGui.PushID(1)

  -- ImGui.PopID()
  ImGui.PopID()

  -- ImGui.GetID(...)
  -- Parameters A: text (str_id)
  -- Returns: int (id)
  -- Overloads
  id = ImGui.GetID("MyID")

Text Widjets:
  -- ImGui.TextUnformatted(...)
  -- Parameters: text (text)
  -- Overloads
  ImGui.TextUnformatted("I am Unformatted")

  -- ImGui.Text(...)
  -- Parameters: text (text)
  ImGui.Text("Well hello there, General Kenobi")

  -- ImGui.TextColored(...)
  -- Parameters: float (color_r), float (color_g), float (color_b), float (color_a), text (text)
  ImGui.TextColored(1, 0, 0, 1, "Well hello there, General Kenobi")

  -- ImGui.TextDisabled(...)
  -- Parameters: text (text)
  ImGui.TextDisabled("Well hello there, General Kenobi")

  -- ImGui.TextWrapped(...)
  -- Parameters: text (text)
  ImGui.TextWrapped("Well hello there, General Kenobi")

  -- ImGui.LabelText(...)
  -- Parameters: text (label), text (text)
  ImGui.LabelText("Well hello there", "General Kenobi")

  -- ImGui.BulletText(...)
  -- Parameters: text (text)
  ImGui.BulletText("Well hello there, General Kenobi")

Widjets Main:
  -- ImGui.Button(...)
  -- Parameters: text (label), float (size_x) [O], float (size_y) [O]
  -- Returns: bool (clicked)
  -- Overloads
  clicked = ImGui.Button("Label")
  clicked = ImGui.Button("Label", 100, 50)

  -- ImGui.SmallButton(...)
  -- Parameters: text (label)
  -- Returns: bool (clicked)
  clicked = ImGui.SmallButton("Label")

  -- ImGui.InvisibleButton(...)
  -- Parameters: text (label), float (size_x), float (size_y)
  -- Returns: bool (clicked)
  clicked = ImGui.InvisibleButton("Label", 100, 50)

  -- ImGui.ArrowButton(...)
  -- Parameters: text (str_id), ImGuiDir (dir)
  -- Returns: bool (clicked)
  clicked = ImGui.ArrowButton("I have an arrow", ImGuiDir.Down)

  -- ImGui.Checkbox(...)
  -- Parameters: text (label), bool (value)
  -- Returns: bool (value), bool (pressed)
  value, pressed = ImGui.Checkbox("My Checkbox", value)

  -- ImGui.RadioButton(...)
  -- Parameters A: text (label), bool (active)
  -- Parameters B: text (label), int (value), int (v_button)
  -- Returns A: bool (pressed)
  -- Returns B: int (value), bool (pressed)
  -- Overloads
  pressed = ImGui.RadioButton("Click me", pressed == true)
  value, pressed = ImGui.RadioButton("Click me too", value, 2)

  -- ImGui.ProgressBar(...)
  -- Parameters: float (fraction), float (size_x) [O], float (size_y) [O], text (overlay) [O]
  -- Overloads
  ImGui.ProgressBar(0.5)
  ImGui.ProgressBar(0.5, 100, 25)
  ImGui.ProgressBar(0.5, 100, 25, "Loading Failed. Sike. - 50%")

  -- ImGui.Bullet()
  ImGui.Bullet()

Widjets ComboBox:
  -- ImGui.BeginCombo(...)
  -- Parameters: text (label), text (previewValue), ImGuiComboFlags (flags) [O]
  -- Returns: bool (shouldDraw)
  -- Overloads
  shouldDraw = ImGui.BeginCombo("My Combo", "Preview")
  shouldDraw = ImGui.BeginCombo("My Combo", "Preview", ImGuiComboFlags.PopupAlignLeft)

  -- ImGui.EndCombo()
  ImGui.EndCombo()

  -- ImGui.Combo(...)
  -- Parameters A: text (label), int (current_item), table (items), int (items_count), int (popup_max_height_in_items) [O]
  -- Parameters B: text (label), int (current_item), text (items_separated_by_zeros), int (popup_max_height_in_items) [O]
  -- Returns: int (current_item), bool (clicked)
  -- Overloads
  current_item, clicked = ImGui.Combo("Label", current_item, { "Option 1 ", "Option 2" }, 2)
  current_item, clicked = ImGui.Combo("Label", current_item, { "Option 1 ", "Option 2" }, 2, 5)
  current_item, clicked = ImGui.Combo("Label", current_item, "Option1\0Option2\0")
  current_item, clicked = ImGui.Combo("Label", current_item, "Option1\0Option2\0", 5)

Widjets Draweables:
  -- ImGui.DragFloat(...)
  -- Parameters: text (label), float (value), float (value_speed) [O], float (value_min) [O], float (value_max) [O], text (format) [O], ImGuiSliderFlags (flags) [O]
  -- Returns: float (value), bool (used)
  -- Overloads
  value, used = ImGui.DragFloat("Label", value)
  value, used = ImGui.DragFloat("Label", value, 0.01)
  value, used = ImGui.DragFloat("Label", value, 0.01, -10)
  value, used = ImGui.DragFloat("Label", value, 0.01, -10, 10)
  value, used = ImGui.DragFloat("Label", value, 0.01, -10, 10, "%.1f")
  value, used = ImGui.DragFloat("Label", value, 0.01, -10, 10, "%.1f", ImGuiSliderFlags.Logarithmic)

  -- ImGui.DragFloat2(...)
  -- Parameters: text (label), table (values), float (value_speed) [O], float (value_min) [O], float (value_max) [O], text (format) [O], ImGuiSliderFlags (flags) [O]
  -- Returns: table (values), bool (used)
  -- Overloads
  values, used = ImGui.DragFloat2("Label", values)
  values, used = ImGui.DragFloat2("Label", values, 0.01)
  values, used = ImGui.DragFloat2("Label", values, 0.01, -10)
  values, used = ImGui.DragFloat2("Label", values, 0.01, -10, 10)
  values, used = ImGui.DragFloat2("Label", values, 0.01, -10, 10, "%.1f")
  values, used = ImGui.DragFloat2("Label", values, 0.01, -10, 10, "%.1f", ImGuiSliderFlags.Logarithmic)

  -- ImGui.DragFloat3(...)
  -- Parameters: text (label), table (values), float (value_speed) [O], float (value_min) [O], float (value_max) [O], text (format) [O], ImGuiSliderFlags (flags) [O]
  -- Returns: table (values), bool (used)
  -- Overloads
  values, used = ImGui.DragFloat3("Label", values)
  values, used = ImGui.DragFloat3("Label", values, 0.01)
  values, used = ImGui.DragFloat3("Label", values, 0.01, -10)
  values, used = ImGui.DragFloat3("Label", values, 0.01, -10, 10)
  values, used = ImGui.DragFloat3("Label", values, 0.01, -10, 10, "%.1f")
  values, used = ImGui.DragFloat3("Label", values, 0.01, -10, 10, "%.1f", ImGuiSliderFlags.Logarithmic)

  -- ImGui.DragFloat4(...)
  -- Parameters: text (label), table (values), float (value_speed) [O], float (value_min) [O], float (value_max) [O], text (format) [O], ImGuiSliderFlags (flags) [O]
  -- Returns: table (values), bool (used)
  -- Overloads
  values, used = ImGui.DragFloat4("Label", values)
  values, used = ImGui.DragFloat4("Label", values, 0.01)
  values, used = ImGui.DragFloat4("Label", values, 0.01, -10)
  values, used = ImGui.DragFloat4("Label", values, 0.01, -10, 10)
  values, used = ImGui.DragFloat4("Label", values, 0.01, -10, 10, "%.1f")
  values, used = ImGui.DragFloat4("Label", values, 0.01, -10, 10, "%.1f", ImGuiSliderFlags.Logarithmic)

  -- ImGui.DragInt(...)
  -- Parameters: text (label), int (value), float (value_speed) [O], int (value_min) [O], int (value_max) [O], text (format) [O], ImGuiSliderFlags (flags) [O]
  -- Returns: int (value), bool (used)
  -- Overloads
  value, used = ImGui.DragInt("Label", value)
  value, used = ImGui.DragInt("Label", value, 0.01)
  value, used = ImGui.DragInt("Label", value, 0.01, -10)
  value, used = ImGui.DragInt("Label", value, 0.01, -10, 10)
  value, used = ImGui.DragInt("Label", value, 0.01, -10, 10, "%d")
  value, used = ImGui.DragInt("Label", value, 0.01, -10, 10, "%d", ImGuiSliderFlags.Logarithmic)

  -- ImGui.DragInt2(...)
  -- Parameters: text (label), table (values), float (value_speed) [O], int (value_min) [O], int (value_max) [O], text (format) [O], ImGuiSliderFlags (flags) [O]
  -- Returns: table (values), bool (used)
  -- Overloads
  values, used = ImGui.DragInt2("Label", values)
  values, used = ImGui.DragInt2("Label", values, 0.01)
  values, used = ImGui.DragInt2("Label", values, 0.01, -10)
  values, used = ImGui.DragInt2("Label", values, 0.01, -10, 10)
  values, used = ImGui.DragInt2("Label", values, 0.01, -10, 10, "%d")
  values, used = ImGui.DragInt2("Label", values, 0.01, -10, 10, "%d", ImGuiSliderFlags.Logarithmic)

  -- ImGui.DragInt3(...)
  -- Parameters: text (label), table (values), float (value_speed) [O], int (value_min) [O], int (value_max) [O], text (format) [O], ImGuiSliderFlags (flags) [O]
  -- Returns: table (values), bool (used)
  -- Overloads
  values, used = ImGui.DragInt3("Label", values)
  values, used = ImGui.DragInt3("Label", values, 0.01)
  values, used = ImGui.DragInt3("Label", values, 0.01, -10)
  values, used = ImGui.DragInt3("Label", values, 0.01, -10, 10)
  values, used = ImGui.DragInt3("Label", values, 0.01, -10, 10, "%d")
  values, used = ImGui.DragInt3("Label", values, 0.01, -10, 10, "%d", ImGuiSliderFlags.Logarithmic)

  -- ImGui.DragInt4(...)
  -- Parameters: text (label), table (values), float (value_speed) [O], int (value_min) [O], int (value_max) [O], text (format) [O], ImGuiSliderFlags (flags) [O]
  -- Returns: table (values), bool (used)
  -- Overloads
  values, used = ImGui.DragInt4("Label", values)
  values, used = ImGui.DragInt4("Label", values, 0.01)
  values, used = ImGui.DragInt4("Label", values, 0.01, -10)
  values, used = ImGui.DragInt4("Label", values, 0.01, -10, 10)
  values, used = ImGui.DragInt4("Label", values, 0.01, -10, 10, "%d")
  values, used = ImGui.DragInt4("Label", values, 0.01, -10, 10, "%d", ImGuiSliderFlags.Logarithmic)

Widjets Sliders:
  -- ImGui.SliderFloat(...)
  -- Parameters: text (label), float (value), float (value_min), float (value_max), text (format) [O], ImGuiSliderFlags (flags) [O]
  -- Returns: float (value), bool (used)
  -- Overloads
  value, used = ImGui.SliderFloat("Label", value, -10, 10)
  value, used = ImGui.SliderFloat("Label", value, -10, 10, "%.1f")
  value, used = ImGui.SliderFloat("Label", value, -10, 10, "%.1f", ImGuiSliderFlags.Logarithmic)

  -- ImGui.SliderFloat2(...)
  -- Parameters: text (label), table (values), float (value_min), float (value_max), text (format) [O], ImGuiSliderFlags (flags) [O]
  -- Returns: table (values), bool (used)
  -- Overloads
  values, used = ImGui.SliderFloat2("Label", values, 0.01, -10, 10)
  values, used = ImGui.SliderFloat2("Label", values, 0.01, -10, 10, "%.1f")
  values, used = ImGui.SliderFloat2("Label", values, 0.01, -10, 10, "%.1f", ImGuiSliderFlags.Logarithmic)

  -- ImGui.SliderFloat3(...)
  -- Parameters: text (label), table (values), float (value_min), float (value_max), text (format) [O], ImGuiSliderFlags (flags) [O]
  -- Returns: table (values), bool (used)
  -- Overloads
  values, used = ImGui.SliderFloat3("Label", values, 0.01, -10, 10)
  values, used = ImGui.SliderFloat3("Label", values, 0.01, -10, 10, "%.1f")
  values, used = ImGui.SliderFloat3("Label", values, 0.01, -10, 10, "%.1f", ImGuiSliderFlags.Logarithmic)

  -- ImGui.SliderFloat4(...)
  -- Parameters: text (label), table (values), float (value_min), float (value_max), text (format) [O], ImGuiSliderFlags (flags) [O]
  -- Returns: table (values), bool (used)
  -- Overloads
  values, used = ImGui.SliderFloat4("Label", values, 0.01, -10, 10)
  values, used = ImGui.SliderFloat4("Label", values, 0.01, -10, 10, "%.1f")
  values, used = ImGui.SliderFloat4("Label", values, 0.01, -10, 10, "%.1f", ImGuiSliderFlags.Logarithmic)

  -- ImGui.SliderAngle(...)
  -- Parameters: text (label), float (v_rad), float (v_degrees_min) [O], float (v_degrees_max) [O], text (format) [O], ImGuiSliderFlags (flags) [O]
  -- Returns: float (v_rad), bool (used)
  -- Overloads
  v_rad, used = ImGui.SliderAngle("Label", v_rad)
  v_rad, used = ImGui.SliderAngle("Label", v_rad, -255)
  v_rad, used = ImGui.SliderAngle("Label", v_rad, -255, 360)
  v_rad, used = ImGui.SliderAngle("Label", v_rad, -255, 360, "%.0f deg")
  v_rad, used = ImGui.SliderAngle("Label", v_rad, -255, 360, "%.0f deg", ImGuiSliderFlags.Logarithmic)

  -- ImGui.SliderInt(...)
  -- Parameters: text (label), int (value), int (value_min), int (value_max), text (format) [O], ImGuiSliderFlags (flags) [O]
  -- Returns: int (value), bool (used)
  -- Overloads
  value, used = ImGui.SliderInt("Label", value, -10, 10)
  value, used = ImGui.SliderInt("Label", value, -10, 10, "%d")
  value, used = ImGui.SliderInt("Label", value, -10, 10, "%d", ImGuiSliderFlags.Logarithmic)

  -- ImGui.SliderInt2(...)
  -- Parameters: text (label), table (values), int (value_min), int (value_max), text (format) [O], ImGuiSliderFlags (flags) [O]
  -- Returns: table (values), bool (used)
  -- Overloads
  values, used = ImGui.SliderInt2("Label", values, -10, 10)
  values, used = ImGui.SliderInt2("Label", values, -10, 10, "%d")
  values, used = ImGui.SliderInt2("Label", values, -10, 10, "%d", ImGuiSliderFlags.Logarithmic)

  -- ImGui.SliderInt3(...)
  -- Parameters: text (label), table (values), int (value_min), int (value_max), text (format) [O], ImGuiSliderFlags (flags) [O]
  -- Returns: table (values), bool (used)
  -- Overloads
  values, used = ImGui.SliderInt3("Label", values, -10, 10)
  values, used = ImGui.SliderInt3("Label", values, -10, 10, "%d")
  values, used = ImGui.SliderInt3("Label", values, -10, 10, "%d", ImGuiSliderFlags.Logarithmic)

  -- ImGui.SliderInt4(...)
  -- Parameters: text (label), table (values), int (value_min), int (value_max), text (format) [O], ImGuiSliderFlags (flags) [O]
  -- Returns: table (values), bool (used)
  -- Overloads
  values, used = ImGui.SliderInt4("Label", values, -10, 10)
  values, used = ImGui.SliderInt4("Label", values, -10, 10, "%d")
  values, used = ImGui.SliderInt4("Label", values, -10, 10, "%d", ImGuiSliderFlags.Logarithmic)

  -- ImGui.VSliderFloat(...)
  -- Parameters: text (label), float (size_x), float (size_y), float (value), float (value_min), float (value_max), text (format) [O], ImGuiSliderFlags (flags) [O]
  -- Returns: float (value), bool (used)
  -- Overloads
  value, used = ImGui.VSliderFloat("Label", 100, 25, value, -10, 10)
  value, used = ImGui.VSliderFloat("Label", 100, 25, value, -10, 10, "%.1f")
  value, used = ImGui.VSliderFloat("Label", 100, 25, value, -10, 10, "%.1f", ImGuiSliderFlags.Logarithmic)

  -- ImGui.VSliderInt(...)
  -- Parameters: text (label), float (size_x), float (size_y), int (value), int (value_min), int (value_max), text (format) [O], ImGuiSliderFlags (flags) [O]
  -- Returns: int (value), bool (used)
  -- Overloads
  value, used = ImGui.VSliderInt("Label", 100, 25, value, -10, 10)
  value, used = ImGui.VSliderInt("Label", 100, 25, value, -10, 10, "%d")
  value, used = ImGui.VSliderInt("Label", 100, 25, value, -10, 10, "%d", ImGuiSliderFlags.Logarithmic)

Widjets Input Keyboard:
  -- ImGui.InputText(...)
  -- Parameters: text (label), text (text), int (buf_size), ImGuiInputTextFlags (flags) [O]
  -- Returns: text (text), bool (selected)
  -- Overloads
  text, selected = ImGui.InputText("Label", text, 100)
  text, selected = ImGui.InputText("Label", text, 100, ImGuiInputTextFlags.ReadOnly)

  -- ImGui.InputTextMultiline(...)
  -- Parameters: text (label), text (text), int (buf_size), float (size_x) [O], float (size_y) [O], ImGuiInputTextFlags (flags) [O]
  -- Returns: text (text), bool (selected)
  -- Overloads
  text, selected = ImGui.InputTextMultiline("Label", text, 100)
  text, selected = ImGui.InputTextMultiline("Label", text, 100, 200, 35)
  text, selected = ImGui.InputTextMultiline("Label", text, 100, 200, 35, ImGuiInputTextFlags.ReadOnly)

  -- ImGui.InputTextWithHint(...)
  -- Parameters: text (label), text (hint), text (text), int (buf_size), ImGuiInputTextFlags (flags) [O]
  -- Returns: text (text), bool (selected)
  -- Overloads
  text, selected = ImGui.InputTextWithHint("Label", "Hint", text, 100)
  text, selected = ImGui.InputTextWithHint("Label", "Hint", text, 100, ImGuiInputTextFlags.ReadOnly)

  -- ImGui.InputFloat(...)
  -- Parameters: text (label), float (value), float (step) [O], float (step_fast) [O], text (format) [O], ImGuiInputTextFlags (flags) [O]
  -- Returns: float (value), bool (used)
  -- Overloads
  value, used = ImGui.InputFloat("Label", value)
  value, used = ImGui.InputFloat("Label", value, 1)
  value, used = ImGui.InputFloat("Label", value, 1, 10)
  value, used = ImGui.InputFloat("Label", value, 1, 10, "%.1f")
  value, used = ImGui.InputFloat("Label", value, 1, 10, "%.1f", ImGuiInputTextFlags.None)

  -- ImGui.InputFloat2(...)
  -- Parameters: text (label), table (values), text (format) [O], ImGuiInputTextFlags (flags) [O]
  -- Returns: table (values), bool (used)
  -- Overloads
  values, used = ImGui.InputFloat2("Label", values)
  values, used = ImGui.InputFloat2("Label", values, "%.1f")
  values, used = ImGui.InputFloat2("Label", values, "%.1f", ImGuiInputTextFlags.None)

  -- ImGui.InputFloat3(...)
  -- Parameters: text (label), table (values), text (format) [O], ImGuiInputTextFlags (flags) [O]
  -- Returns: table (values), bool (used)
  -- Overloads
  values, used = ImGui.InputFloat3("Label", values)
  values, used = ImGui.InputFloat3("Label", values, "%.1f")
  values, used = ImGui.InputFloat3("Label", values, "%.1f", ImGuiInputTextFlags.None)

  -- ImGui.InputFloat4(...)
  -- Parameters: text (label), table (values), text (format) [O], ImGuiInputTextFlags (flags) [O]
  -- Returns: table (values), bool (used)
  -- Overloads
  values, used = ImGui.InputFloat4("Label", values)
  values, used = ImGui.InputFloat4("Label", values, "%.1f")
  values, used = ImGui.InputFloat4("Label", values, "%.1f", ImGuiInputTextFlags.None)

  -- ImGui.InputInt(...)
  -- Parameters: text (label), int (value), int (step) [O], int (step_fast) [O], ImGuiInputTextFlags (flags) [O]
  -- Returns: int (value), bool (used)
  -- Overloads
  value, used = ImGui.InputInt("Label", value)
  value, used = ImGui.InputInt("Label", value, 1)
  value, used = ImGui.InputInt("Label", value, 1, 10)
  value, used = ImGui.InputInt("Label", value, 1, 10, ImGuiInputTextFlags.None)

  -- ImGui.InputInt2(...)
  -- Parameters: text (label), table (values), ImGuiInputTextFlags (flags) [O]
  -- Returns: table (values), bool (used)
  -- Overloads
  values, used = ImGui.InputInt2("Label", values)
  values, used = ImGui.InputInt2("Label", values, ImGuiInputTextFlags.None)

  -- ImGui.InputInt3(...)
  -- Parameters: text (label), table (values), ImGuiInputTextFlags (flags) [O]
  -- Returns: table (values), bool (used)
  -- Overloads
  values, used = ImGui.InputInt3("Label", values)
  values, used = ImGui.InputInt3("Label", values, ImGuiInputTextFlags.None)

  -- ImGui.InputInt4(...)
  -- Parameters: text (label), table (values), ImGuiInputTextFlags (flags) [O]
  -- Returns: table (values), bool (used)
  -- Overloads
  values, used = ImGui.InputInt4("Label", values)
  values, used = ImGui.InputInt4("Label", values, ImGuiInputTextFlags.None)

  -- ImGui.InputDouble(...)
  -- Parameters: text (label), double (value), double (step) [O], double (step_fast) [O], text (format) [O], ImGuiInputTextFlags (flags) [O]
  -- Returns: double (value), bool (used)
  -- Overloads
  value, used = ImGui.InputDouble("Label", value)
  value, used = ImGui.InputDouble("Label", value, 1)
  value, used = ImGui.InputDouble("Label", value, 1, 10)
  value, used = ImGui.InputDouble("Label", value, 1, 10, "%.4f")
  value, used = ImGui.InputDouble("Label", value, 1, 10, "%.4f", ImGuiInputTextFlags.None)

Widjets ColorPicker:
  -- ImGui.ColorEdit3(...)
  -- Parameters: text (label), table (col), ImGuiColorEditFlags (flags) [O]
  -- Returns: table (col), bool (used)
  -- Overloads
  col, used = ImGui.ColorEdit3("Label", col)
  col, used = ImGui.ColorEdit3("Label", col, ImGuiColorEditFlags.NoTooltip)

  -- ImGui.ColorEdit4(...)
  -- Parameters: text (label), table (col), ImGuiColorEditFlags (flags) [O]
  -- Returns: table (col), bool (used)
  -- Overloads
  col, used = ImGui.ColorEdit4("Label", col)
  col, used = ImGui.ColorEdit4("Label", col, ImGuiColorEditFlags.NoTooltip)

  -- ImGui.ColorPicker3(...)
  -- Parameters: text (label), table (col), ImGuiColorEditFlags (flags) [O]
  -- Returns: table (col), bool (used)
  -- Overloads
  col, used = ImGui.ColorPicker3("Label", col)
  col, used = ImGui.ColorPicker3("Label", col, ImGuiColorEditFlags.NoTooltip)

  -- ImGui.ColorPicker4(...)
  -- Parameters: text (label), table (col), ImGuiColorEditFlags (flags) [O]
  -- Returns: table (col), bool (used)
  -- Overloads
  col, used = ImGui.ColorPicker4("Label", col)
  col, used = ImGui.ColorPicker4("Label", col, ImGuiColorEditFlags.NoTooltip)

  -- ImGui.ColorButton(...)
  -- Parameters: text (desc_id), table (col), ImGuiColorEditFlags (flags) [O], float (size_x) [O], float (size_y) [O]
  -- Returns: bool (pressed)
  -- Overloads
  pressed = ImGui.ColorButton("Desc ID", { 1, 0, 0, 1 })
  pressed = ImGui.ColorButton("Desc ID", { 1, 0, 0, 1 }, ImGuiColorEditFlags.None)
  pressed = ImGui.ColorButton("Desc ID", { 1, 0, 0, 1 }, ImGuiColorEditFlags.None, 100, 100)

  -- ImGui.SetColorEditOptions(...)
  -- Parameters: ImGuiColorEditFlags (flags)
  ImGui.SetColorEditOptions(ImGuiColorEditFlags.NoTooltip | ImGuiColorEditFlags.NoInputs)

Widjets Trees:
  -- ImGui.TreeNode(...)
  -- Parameters: text (label), text (fmt) [O]
  -- Returns: bool (open)
  -- Overloads
  open = ImGui.TreeNode("Label")
  open = ImGui.TreeNode("Label", "Some Text")

  -- ImGui.TreeNodeEx(...)
  -- Parameters: text (label), ImGuiTreeNodeFlags (flags) [O], text (fmt) [O]
  -- Returns: bool (open)
  -- Overloads
  open = ImGui.TreeNodeEx("Label")
  open = ImGui.TreeNodeEx("Label", ImGuiTreeNodeFlags.Selected)
  open = ImGui.TreeNodeEx("Label", ImGuiTreeNodeFlags.Selected, "Some Text")

  -- ImGui.TreePush(...)
  -- Parameters: text (str_id)
  ImGui.TreePush("String ID")

  -- ImGui.TreePop()
  ImGui.TreePop()

  -- ImGui.GetTreeNodeToLabelSpacing()
  -- Returns: float (spacing)
  spacing = ImGui.GetTreeNodeToLabelSpacing()

  -- ImGui.CollapsingHeader(...)
  -- Parameters A: text (label), ImGuiTreeNodeFlags (flags) [O]
  -- Parameters B: text (label), bool (open), ImGuiTreeNodeFlags (flags) [O]
  -- Returns A: bool (notCollapsed)
  -- Returns B: bool (open), bool (notCollapsed)
  -- Overloads
  notCollapsed = ImGui.CollapsingHeader("Label")
  notCollapsed = ImGui.CollapsingHeader("Label", ImGuiTreeNodeFlags.Selected)
  open, notCollapsed = ImGui.CollapsingHeader("Label", open)
  open, notCollapsed = ImGui.CollapsingHeader("Label", open, ImGuiTreeNodeFlags.Selected)

  -- ImGui.SetNextItemOpen(...)
  -- Parameters: bool (open), ImGuiCond (cond) [O]
  -- Overloads
  ImGui.SetNextItemOpen(true)
  ImGui.SetNextItemOpen(true, ImGuiCond.Always)

Widjets Selectables:
  -- ImGui.Selectable(...)
  -- Parameters: text (label), bool (selected) [O], ImGuiSelectableFlags (flags) [O], float (size_x) [O], float (size_y) [O]
  -- Returns: bool (selected)
  -- Overloads
  selected = ImGui.Selectable("Label")
  selected = ImGui.Selectable("Label", selected)
  selected = ImGui.Selectable("Label", selected, ImGuiSelectableFlags.AllowDoubleClick)
  selected = ImGui.Selectable("Label", selected, ImGuiSelectableFlags.AllowDoubleClick, 100, 100)

Widjets ListBoxes:
  -- ImGui.ListBox(...)
  -- Parameters: text (label), int (current_item), table (items), int (items_count), int (height_in_items) [O]
  -- Returns: int (current_item), bool (clicked)
  -- Overloads
  current_item, clicked = ImGui.ListBox("Label", current_item, { "Item 1", "Item 2", 2 })
  current_item, clicked = ImGui.ListBox("Label", current_item, { "Item 1", "Item 2", 2 }, 5)

  -- ImGui.BeginListBox(...)
  -- Parameters A: text (label), float (size_x) [O], float (size_y) [O]
  -- Returns: bool (open)
  -- Overloads
  open = ImGui.BeginListBox("Label")
  open = ImGui.BeginListBox("Label", 100.0, 100.0)

  -- ImGui.EndListBox()
  ImGui.EndListBox()

Widjets value():
  -- ImGui.Value(...)
  -- Parameters: text (prefix) bool/int/unsigned int/float (value), text (float_format) [O] -- format only available with float
  -- Overloads
  ImGui.Value("Prefix", true)
  ImGui.Value("Prefix", -5)
  ImGui.Value("Prefix", 5)
  ImGui.Value("Prefix", 5.0)
  ImGui.Value("Prefix", 5.0, "%.2f")

Widjets Menu:
-- ImGui.BeginMenuBar()
-- Returns: bool (shouldDraw)
shouldDraw = ImGui.BeginMenuBar()

-- ImGui.EndMenuBar()
ImGui.EndMenuBar()

-- ImGui.BeginMainMenuBar()
-- Returns: bool (shouldDraw)
shouldDraw = ImGui.BeginMainMenuBar()

-- ImGui.EndMainMenuBar()
ImGui.EndMainMenuBar()

-- ImGui.BeginMenu(...)
-- Parameters: text (label), bool (enabled) [O]
-- Returns: bool (shouldDraw)
-- Overloads
shouldDraw = ImGui.BeginMenu("Label")
shouldDraw = ImGui.BeginMenu("Label", true)

-- ImGui.EndMenu()
ImGui.EndMenu()

-- ImGui.MenuItem(...)
-- Parameters A: text (label), text (shortcut) [0]
-- Parameters B: text (label), text (shortcut), bool (selected)
-- Returns A: bool (activated)
-- returns B: bool (selected), bool (activated)
-- Overloads
activated = ImGui.MenuItem("Label")
activated = ImGui.MenuItem("Label", "ALT+F4")
selected, activated = ImGui.MenuItem("Label", "ALT+F4", selected)
selected, activated = ImGui.MenuItem("Label", "ALT+F4", selected, true)

Tooltips:
  -- ImGui.BeginTooltip()
  ImGui.BeginTooltip()

  -- ImGui.EndTooltip()
  ImGui.EndTooltip()

  -- ImGui.SetTooltip(...)
  -- Parameters: text (fmt)
  ImGui.SetTooltip("Did you know that I have the high ground?")

Popups:
  -- ImGui.BeginPopup(...)
  -- Parameters: text (str_id), ImGuiWindowFlags (flags) [O]
  -- Returns: bool (open)
  -- Overloads
  open = ImGui.BeginPopup("String ID")
  open = ImGui.BeginPopup("String ID", ImGuiWindowFlags.NoCollapse)

  -- ImGui.BeginPopupModal(...)
  -- Parameters: text (name), bool (open) [O], ImGuiWindowFlags (flags) [O]
  -- Returns: bool (open)
  -- Overloads
  open = ImGui.BeginPopupModal("Name")
  open = ImGui.BeginPopupModal("Name", ImGuiWindowFlags.NoCollapse)
  open = ImGui.BeginPopupModal("Name", open)
  open = ImGui.BeginPopupModal("Name", open, ImGuiWindowFlags.NoCollapse)

  -- ImGui.EndPopup()
  ImGui.EndPopup()

  -- ImGui.OpenPopup(...)
  -- Parameters: text (str_id), ImGuiPopupFlags (popup_flags)
  -- Overloads
  ImGui.OpenPopup("String ID")
  ImGui.OpenPopup("String ID", ImGuiPopupFlags.NoOpenOverExistingPopup)

  -- ImGui.OpenPopupContextItem(...)
  -- Parameters: text (str_id), ImGuiPopupFlags (popup_flags)
  -- Returns: bool (open)
  -- Overloads
  open = ImGui.OpenPopupContextItem()
  open = ImGui.OpenPopupContextItem("String ID")
  open = ImGui.OpenPopupContextItem("String ID", ImGuiPopupFlags.NoOpenOverExistingPopup)

  -- ImGui.CloseCurrentPopup()
  ImGui.CloseCurrentPopup()

  -- ImGui.BeginPopupContextItem(...)
  -- Parameters: text (str_id), ImGuiPopupFlags (popup_flags)
  -- Returns: bool (open)
  -- Overloads
  open = ImGui.BeginPopupContextItem()
  open = ImGui.BeginPopupContextItem("String ID")
  open = ImGui.BeginPopupContextItem("String ID", ImGuiPopupFlags.NoOpenOverExistingPopup)

  -- ImGui.BeginPopupContextWindow(...)
  -- Parameters: text (str_id), ImGuiPopupFlags (popup_flags)
  -- Returns: bool (open)
  -- Overloads
  open = ImGui.BeginPopupContextWindow()
  open = ImGui.BeginPopupContextWindow("String ID")
  open = ImGui.BeginPopupContextWindow("String ID", ImGuiPopupFlags.NoOpenOverExistingPopup)

  -- ImGui.BeginPopupContextVoid(...)
  -- Parameters: text (str_id), ImGuiPopupFlags (popup_flags)
  -- Returns: bool (open)
  -- Overloads
  open = ImGui.BeginPopupContextVoid()
  open = ImGui.BeginPopupContextVoid("String ID")
  open = ImGui.BeginPopupContextVoid("String ID", ImGuiPopupFlags.NoOpenOverExistingPopup)

  -- ImGui.IsPopupOpen(...)
  -- Parameters: text (str_id), ImGuiPopupFlags (popup_flags)
  -- Overloads
  ImGui.IsPopupOpen("String ID")
  ImGui.IsPopupOpen("String ID", ImGuiPopupFlags.NoOpenOverExistingPopup)

Tables:
  -- ImGui.BeginTable(...)
  -- Parameters: string (str_id), int (column), ImGuiTableFlags (flags) [O], float (outer_size_x) [O], float (outer_size_y) [O], float (inner_width) [O]
  -- Returns: bool
  ImGui.BeginTable("Table1", 3)
  ImGui.BeginTable("Table1", 3, ImGuiTableFlags.Resizable)
  ImGui.BeginTable("Table1", 3, ImGuiTableFlags.Resizable, 200, 150)
  ImGui.BeginTable("Table1", 3, ImGuiTableFlags.Resizable, 200, 150, 10)

  -- ImGui.EndTable() // only call EndTable() if BeginTable() returns true!
  ImGui.EndTable()

  -- ImGui.TableNextRow(...) // append into the first cell of a new row.
  -- Parameters: ImGuiTableRowFlags (flags) [O], float (min_row_height) [O]
  ImGui.TableNextRow()
  ImGui.TableNextRow(ImGuiTableRowFlags.Headers)
  ImGui.TableNextRow(ImGuiTableRowFlags.Headers, 25)

  -- ImGui.TableNextColumn() // append into the next column (or first column of next row if currently in last column). Return true when column is visible.
  -- Returns: bool (visible)
  visible = ImGui.TableNextColumn()

  -- ImGui.TableSetColumnIndex(...) // append into the specified column. Return true when column is visible.
  -- Parameter: int (column_n)
  -- Returns: bool (visible)
  visible = ImGui.TableSetColumnIndex(2)

  -- ImGui.TableSetupColumn(...)
  -- Parameters: string (label), ImGuiTableColumnFlags (flags) [O], float (init_width_or_weight) [O], ImU32 (user_id) [O]
  ImGui.TableSetupColumn("Column1")
  ImGui.TableSetupColumn("Column1", ImGuiTableColumnFlags.WidthFixed)
  ImGui.TableSetupColumn("Column1", ImGuiTableColumnFlags.WidthFixed, 60)

  -- ImGui.TableSetupScrollFreeze(...) // lock columns/rows so they stay visible when scrolled.
  -- Parameters: int (cols), int(rows)
  ImGui.TableSetupScrollFreeze(3, 1)

  -- ImGuui.TableHeadersRow() // submit all headers cells based on data provided to TableSetupColumn() + submit context menu
  ImGui.TableHeadersRow()

  -- ImGui.TableHeader(...) // submit one header cell manually (rarely used)
  -- Parameter: string (label)
  ImGui.TableHeader("Header")

  -- ImGui.TableGetSortSpecs() // get latest sort specs for the table (NULL if not sorting).
  -- Returns: ImGuiTableSortSpecs*
  ImGui.TableGetSortSpecs()

  -- ImGui.TableGetColumnCount() // return number of columns (value passed to BeginTable)
  -- Returns: int (cols)
  cols = ImGui.TableGetColumnCount()

  -- ImGui.TableGetColumnIndex() // return current column index.
  -- Returns: int (col_index)
  col_index = ImGui.TableGetColumnIndex()

  -- ImGui.TableGetRowIndex() // return current row index.
  -- Returns: int (row_index)
  row_index = ImGui.TableGetRowIndex()

  -- ImGui.TableGetColumnName(...) // return "" if column didn't have a name declared by TableSetupColumn(). Pass -1 to use current column.
  -- Parameter: int (column_n) [O]
  -- Returns: string(col_name)
  col_name = ImGui.TableGetColumnName()
  col_name = ImGui.TableGetColumnName(2)

  -- ImGui.TableGetColumnFlags(...) // return column flags so you can query their Enabled/Visible/Sorted/Hovered status flags. Pass -1 to use current column.
  -- Parameter: int (column_n) [O]
  -- Returns: ImGuiTableColumnFlags
  col_flags = ImGui.TableGetColumnFlags()
  col_flags = ImGui.TableGetColumnFlags(2)

  -- ImGui.TableSetBgColor(ImGuiTableBgTarget target, ImU32 color, int column_n = -1) // change the color of a cell, row, or column. See ImGuiTableBgTarget_ flags for details.
  -- Parameters1: ImGuiTableBgTarget (target), ImU32 (color), int (column_n) [O]
  -- Parameters2: ImGuiTableBgTarget (target), float (col_R), float (col_G), float (col_B), float (col_A), int (column_n) [O]
  ImGui.TableSetBgColor(ImGuiTableBgTarget.CellBg, 0xF42069FF)
  ImGui.TableSetBgColor(ImGuiTableBgTarget.CellBg, 0xF42069FF, 2)
  ImGui.TableSetBgColor(ImGuiTableBgTarget.CellBg, 1, 0, 0, 1)
  ImGui.TableSetBgColor(ImGuiTableBgTarget.CellBg, 1, 0, 0, 1, 2)

Columns:
  -- ImGui.BeginTable(...)
  -- Parameters: string (str_id), int (column), ImGuiTableFlags (flags) [O], float (outer_size_x) [O], float (outer_size_y) [O], float (inner_width) [O]
  -- Returns: bool
  ImGui.BeginTable("Table1", 3)
  ImGui.BeginTable("Table1", 3, ImGuiTableFlags.Resizable)
  ImGui.BeginTable("Table1", 3, ImGuiTableFlags.Resizable, 200, 150)
  ImGui.BeginTable("Table1", 3, ImGuiTableFlags.Resizable, 200, 150, 10)

  -- ImGui.EndTable() // only call EndTable() if BeginTable() returns true!
  ImGui.EndTable()

  -- ImGui.TableNextRow(...) // append into the first cell of a new row.
  -- Parameters: ImGuiTableRowFlags (flags) [O], float (min_row_height) [O]
  ImGui.TableNextRow()
  ImGui.TableNextRow(ImGuiTableRowFlags.Headers)
  ImGui.TableNextRow(ImGuiTableRowFlags.Headers, 25)

  -- ImGui.TableNextColumn() // append into the next column (or first column of next row if currently in last column). Return true when column is visible.
  -- Returns: bool (visible)
  visible = ImGui.TableNextColumn()

  -- ImGui.TableSetColumnIndex(...) // append into the specified column. Return true when column is visible.
  -- Parameter: int (column_n)
  -- Returns: bool (visible)
  visible = ImGui.TableSetColumnIndex(2)

  -- ImGui.TableSetupColumn(...)
  -- Parameters: string (label), ImGuiTableColumnFlags (flags) [O], float (init_width_or_weight) [O], ImU32 (user_id) [O]
  ImGui.TableSetupColumn("Column1")
  ImGui.TableSetupColumn("Column1", ImGuiTableColumnFlags.WidthFixed)
  ImGui.TableSetupColumn("Column1", ImGuiTableColumnFlags.WidthFixed, 60)

  -- ImGui.TableSetupScrollFreeze(...) // lock columns/rows so they stay visible when scrolled.
  -- Parameters: int (cols), int(rows)
  ImGui.TableSetupScrollFreeze(3, 1)

  -- ImGuui.TableHeadersRow() // submit all headers cells based on data provided to TableSetupColumn() + submit context menu
  ImGui.TableHeadersRow()

  -- ImGui.TableHeader(...) // submit one header cell manually (rarely used)
  -- Parameter: string (label)
  ImGui.TableHeader("Header")

  -- ImGui.TableGetSortSpecs() // get latest sort specs for the table (NULL if not sorting).
  -- Returns: ImGuiTableSortSpecs*
  ImGui.TableGetSortSpecs()

  -- ImGui.TableGetColumnCount() // return number of columns (value passed to BeginTable)
  -- Returns: int (cols)
  cols = ImGui.TableGetColumnCount()

  -- ImGui.TableGetColumnIndex() // return current column index.
  -- Returns: int (col_index)
  col_index = ImGui.TableGetColumnIndex()

  -- ImGui.TableGetRowIndex() // return current row index.
  -- Returns: int (row_index)
  row_index = ImGui.TableGetRowIndex()

  -- ImGui.TableGetColumnName(...) // return "" if column didn't have a name declared by TableSetupColumn(). Pass -1 to use current column.
  -- Parameter: int (column_n) [O]
  -- Returns: string(col_name)
  col_name = ImGui.TableGetColumnName()
  col_name = ImGui.TableGetColumnName(2)

  -- ImGui.TableGetColumnFlags(...) // return column flags so you can query their Enabled/Visible/Sorted/Hovered status flags. Pass -1 to use current column.
  -- Parameter: int (column_n) [O]
  -- Returns: ImGuiTableColumnFlags
  col_flags = ImGui.TableGetColumnFlags()
  col_flags = ImGui.TableGetColumnFlags(2)

  -- ImGui.TableSetBgColor(ImGuiTableBgTarget target, ImU32 color, int column_n = -1) // change the color of a cell, row, or column. See ImGuiTableBgTarget_ flags for details.
  -- Parameters1: ImGuiTableBgTarget (target), ImU32 (color), int (column_n) [O]
  -- Parameters2: ImGuiTableBgTarget (target), float (col_R), float (col_G), float (col_B), float (col_A), int (column_n) [O]
  ImGui.TableSetBgColor(ImGuiTableBgTarget.CellBg, 0xF42069FF)
  ImGui.TableSetBgColor(ImGuiTableBgTarget.CellBg, 0xF42069FF, 2)
  ImGui.TableSetBgColor(ImGuiTableBgTarget.CellBg, 1, 0, 0, 1)
  ImGui.TableSetBgColor(ImGuiTableBgTarget.CellBg, 1, 0, 0, 1, 2)

Table Bars:
  -- ImGui.BeginTabBar(...)
  -- Parameters: text (str_id), ImGuiTabBarFlags (flags)
  -- Returns: bool (open)
  -- Overloads
  open = ImGui.BeginTabBar("String ID")
  open = ImGui.BeginTabBar("String ID", ImGuiTabBarFlags.Reorderable)

  -- ImGui.EndTabBar()
  ImGui.EndTabBar()

  -- ImGui.BeginTabItem()
  -- Parameters A: text (label)
  -- Parameters B: text (label), bool (open), ImGuiTabItemFlags (flags) [O]
  -- Returns A: bool (selected)
  -- Returns B: bool (open), bool (selected)
  -- Overloads
  selected = ImGui.BeginTabItem("Label")
  selected = ImGui.BeginTabItem("Label", ImGuiTabItemFlags.NoTooltip)
  open, selected = ImGui.BeginTabItem("Label", open)
  open, selected = ImGui.BeginTabItem("Label", open, ImGuiTabItemFlags.NoTooltip)

  -- ImGui.EndTabItem()
  ImGui.EndTabItem()

  -- ImGui.SetTabItemClosed(...)
  -- Parameters: text (tab_or_docked_window_label)
  ImGui.SetTabItemClosed("MyDockedWindow")

Disabling:
  -- ImGui.BeginDisabled()
  -- ImGui.BeginDisabled(disabled) -- bool: disabled
  -- ImGui.EndDisabled()
  ImGui.BeginDisabled()
  ImGui.BeginDisabled(false)
  ImGui.EndDisabled()

Cliping:
  -- ImGui.PushClipRect(...)
  -- Parameters: float (min_x), float (min_y), float (max_x), float (max_y), bool (intersect_current)
  ImGui.PushClipRect(0, 0, 100, 100, false)

  -- ImGui.PopClipRect()
  ImGui.PopClipRect()

Activate Focus:
  -- ImGui.SetItemDefaultFocus()
  ImGui.SetItemDefaultFocus()

  -- ImGui.SetKeyboardFocusHere(...)
  -- Parameters: int (offset) [O]
  -- Overloads
  ImGui.SetItemDefaultFocus()
  ImGui.SetItemDefaultFocus(5)

Widjet Utilities:
  -- ImGui.IsItemHovered(...)
  -- Parameters: ImGuiHoveredFlags (flags) [O]
  -- Returns: bool (hovered)
  -- Overloads
  hovered = ImGui.IsItemHovered()
  hovered = ImGui.IsItemHovered(ImGuiHoveredFlags.ChildWindows)

  -- ImGui.IsItemActive()
  -- Returns: bool (active)
  active = ImGui.IsItemActive()

  -- ImGui.IsItemFocused()
  -- Returns: bool (focused)
  focused = ImGui.IsItemFocused()

  -- ImGui.IsItemClicked(...)
  -- Parameters: ImGuiMouseButton (mouse_button) [O]
  -- Returns: bool (clicked)
  -- Overloads
  clicked = ImGui.IsItemClicked()
  clicked = ImGui.IsItemClicked(ImGuiMouseButton.Middle)

  -- ImGui.IsItemVisible()
  -- Returns: bool (visible)
  visible = ImGui.IsItemVisible()

  -- ImGui.IsItemEdited()
  -- Returns: bool (edited)
  edited = ImGui.IsItemEdited()

  -- ImGui.IsItemActivated()
  -- Returns: bool (activated)
  activated = ImGui.IsItemActivated()

  -- ImGui.IsItemDeactivated()
  -- Returns: bool (deactivated)
  deactivated = ImGui.IsItemDeactivated()

  -- ImGui.IsItemDeactivatedAfterEdit()
  -- Returns: bool (deactivated_after_edit)
  deactivated_after_edit = ImGui.IsItemDeactivatedAfterEdit()

  -- ImGui.IsItemToggledOpen()
  -- Returns: bool (toggled_open)
  toggled_open = ImGui.IsItemToggledOpen()

  -- ImGui.IsAnyItemHovered()
  -- Returns: bool (any_item_hovered)
  any_item_hovered = ImGui.IsAnyItemHovered()

   -- ImGui.IsAnyItemActive()
  -- Returns: bool (any_item_active)
  any_item_active = ImGui.IsAnyItemActive()

  -- ImGui.IsAnyItemFocused()
  -- Returns: bool (any_item_focused)
  any_item_focused = ImGui.IsAnyItemFocused()

  -- ImGui.GetItemRectMin()
  -- Returns: float (x), float (y)
  x, y = ImGui.GetItemRectMin()

  -- ImGui.GetItemRectMax()
  -- Returns: float (x), float (y)
  x, y = ImGui.GetItemRectMax()

  -- ImGui.GetItemRectSize()
  -- Returns: float (x), float (y)
  x, y = ImGui.GetItemRectSize()

  -- ImGui.SetItemAllowOverlap()
  ImGui.SetItemAllowOverlap()

Misc Utilities:
  -- ImGui.IsRectVisible(...)
  -- Parameters A: float (size_x), float (size_y)
  -- Parameters B: float(min_x), float (min_y), float (max_x), float (max_y)
  -- Returns: bool (visible)
  -- Overloads
  visible = ImGui.IsRectVisible(100, 100)
  visible = ImGui.IsRectVisible(50, 50, 200, 200)

  -- ImGui.GetTime()
  -- Returns double (time)
  time = ImGui.GetTime()

  -- ImGui.GetFrameCount()
  -- Returns int (frame_count)
  frame_count = ImGui.GetFrameCount()

  -- ImGui.GetStyleColorName(...)
  -- Parameters: ImGuiCol (idx)
  -- Returns: text (style_color_name)
  style_color_name = ImGui.GetStyleColorName(ImGuiCol.Text)

  -- ImGui.BeginChildFrame(...)
  -- Parameters: unsigned int (id), float (size_x), float (size_y), ImGuiWindowFlags (flags) [O]
  -- Returns: bool (open)
  -- Overloads
  open = ImGui.BeginChildFrame(0, 100, 100)
  open = ImGui.BeginChildFrame(0, 100, 100, ImGuiWindowFlags.NoBackground)

  -- ImGui.EndChildFrame()
  ImGui.EndChildFrame()

Text Utilities:
  -- ImGui.CalcTextSize(...)
  -- Parameters: text (text), bool (hide_text_after_double_hash) [O], float (wrap_width) [O]
  -- Returns: float (x), float (y)
  -- Overloads
  x, y = ImGui.CalcTextSize("Calculate me")
  x, y = ImGui.CalcTextSize("Calculate me", true)
  x, y = ImGui.CalcTextSize("Calculate me", true, 100)

Color Utilities:
  -- ImGui.ColorConvertRGBtoHSV(...)
  -- Parameters: float (r), float (g), float (b)
  -- Returns: float (h), float (s), float (v)
  h, s, v = ImGui.ColorConvertRGBtoHSV(1, 0, 0.5)

  -- ImGui.ColorConvertHSVtoRGB(...)
  -- Parameters: float (h), float (s), float (v)
  -- Returns: float (r), float (g), float (b)
  r, g, b = ImGui.ColorConvertHSVtoRGB(1, 0, 0.5)

  -- ImGui.ColorConvertU32ToFloat4(...)
  -- Parameters: int (color_u32)
  -- Returns: float array (color_f4={r,g,b,a})
  color_f4 = ImGui.ColorConvertU32ToFloat4(0xF69420FF)

  -- ImGui.ColorConvertFloat4ToU32(...)
  -- Parameters: float array (color_f4={r,g,b,a})
  -- Returns: int (color_u32)
  -- NOTE: this function is fundamentally
  color_u32 = ImGui.ColorConvertFloat4ToU32({0.4, 0.2, 0, 1})

Input Utilities:
  -- ImGui.IsMouseHoveringRect(...)
  -- Parameters: float (min_x), float (min_y), float(max_x), float(max_y), bool (clip) [O]
  -- Returns: bool (hovered)
  hovered = ImGui.IsMouseHoveringRect(0, 0, 100, 100)
  hovered = ImGui.IsMouseHoveringRect(0, 0, 100, 100, true)

  -- ImGui.GetMousePos()
  -- Returns: float (x), float (y)
  x, y = ImGui.GetMousePos()

  -- ImGui.GetMousePosOnOpeningCurrentPopup()
  -- Returns: float (x), float (y)
  x, y = ImGui.GetMousePosOnOpeningCurrentPopup()

  -- ImGui.IsMouseDragging(...)
  -- Parameters: ImGuiMouseButton (button), float (lock_threshold) [O]
  -- Returns: bool (dragging)
  -- Overloads
  dragging = ImGui.IsMouseDragging(ImGuiMouseButton.Middle)
  dragging = ImGui.IsMouseDragging(ImGuiMouseButton.Middle, 0.5)

  -- ImGui.GetMouseDragDelta(...)
  -- Parameters: ImGuiMouseButton (button) [O], float (lock_threshold) [O]
  -- Returns: float (x), float (y)
  -- Overloads
  x, y = ImGui.GetMouseDragDelta()
  x, y = ImGui.GetMouseDragDelta(ImGuiMouseButton.Middle)
  x, y = ImGui.GetMouseDragDelta(ImGuiMouseButton.Middle, 0.5)

  -- ImGui.ResetMouseDragDelta(...)
  -- Parameters: ImGuiMouseButton (button) [O]
  -- Overloads
  ImGui.ResetMouseDragDelta()
  ImGui.ResetMouseDragDelta(ImGuiMouseButton.Middle)

Clipboard Utilities:
  -- ImGui.GetClipboardText()
  -- Returns: text (text)
  text = ImGui.GetClipboardText()

  -- ImGui.SetClipboardText(...)
  -- Parameters: text (text)
  ImGui.SetClipboardText("I made it to the clipboard!")
